version: '3.1'
services:

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

  init-kafka:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server localhost:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server localhost:9092 --create --if-not-exists --topic kafka-log-topic --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server localhost:9092 --list
      "
  #
  #  kafka-manager:
  #    image: hlebalbau/kafka-manager:stable
  #    container_name: kafka-manager
  #    ports:
  #      - "9000:9000"
  #    environment:
  #      ZK_HOSTS: "zookeeper:2181"

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq/
    networks:
      - spring-boot
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: 123456


#  mongo:
#    image: mongo:6
#    restart: always
#    container_name: mongo
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: root
#      MONGO_INITDB_ROOT_PASSWORD: example
#    #      MONGO_INITDB_DATABASE: init
#    volumes:
#      - ./db_data/:/data/db/
#      - /etc/timezone:/etc/timezone:ro
#    networks:
#      - spring-boot
#  mongo-express:
#    image: mongo-express
#    restart: always
#    container_name: mongo_ui
#    ports:
#      - 8081:8081
#    environment:
#      ME_CONFIG_MONGODB_ADMINUSERNAME: root
#      ME_CONFIG_MONGODB_ADMINPASSWORD: example
#      ME_CONFIG_MONGODB_SERVER: mongodb
#    networks:
#      - spring-boot

  mongodb:
    image: mongo:7.0
    container_name: mongodb
    environment:
      MONGODB_DATABASE: error-logs
#      MONGO_INITDB_ROOT_USERNAME: admin
#      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "27017:27017"
    volumes:
#      - ./initialize-mongo.js:/docker-entrypoint-initdb.d/initialize-mongo.js:ro
      - mongodb_data:/data/db
    networks:
      - spring-boot

  mongo-express:
    image: mongo-express:0.54.0
    container_name: mongo-express
    restart: always
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
#      ME_CONFIG_BASICAUTH_PASSWORD: example
      ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"
    ports:
      - "8081:8081"
    expose:
      - "8081"
    volumes:
      - ./express-app:/app
    depends_on:
      - mongodb
    networks:
      - spring-boot

volumes:
  mongodb_data:
networks:
  spring-boot:
    driver: bridge